{"paragraphs":[{"text":"// Read temperature data for 1986 and station data\n\nval temps = spark.read.csv(\"/Users/rachlin/data/weather/1986.csv\").toDF(\"STATION\", \"WBAN\", \"MONTH\", \"DAY\", \"TEMP\")\nval stations = spark.read.csv(\"/Users/rachlin/data/weather/stations.csv\").toDF(\"STATION\", \"WBAN\", \"LAT\", \"LON\")","dateUpdated":"2018-03-21T22:41:05-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"temps: org.apache.spark.sql.DataFrame = [STATION: string, WBAN: string ... 3 more fields]\nstations: org.apache.spark.sql.DataFrame = [STATION: string, WBAN: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1521686465022_-1689193362","id":"20180318-191454_284618957","dateCreated":"2018-03-21T22:41:05-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1125"},{"text":"// Filter bad Stations where the latitude or longitude is unavailable\n// Only include temperature data for JANUARY 28th, 1986\n// You'll want to convert latitudes and longitudes to Doubles\n\n","dateUpdated":"2018-03-21T22:44:34-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1521686465026_-1998531478","id":"20180318-191924_1310538952","dateCreated":"2018-03-21T22:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1126","user":"anonymous","dateFinished":"2018-03-21T22:41:53-0400","dateStarted":"2018-03-21T22:41:52-0400"},{"text":"// Define a function that compute the distance between two points on the Earth using the Haversine formula\n// https://www.movable-type.co.uk/scripts/latlong.html\n// Declare the function as a UDF (User-defined function) so that it can be applied\n\nval pi = 3.14159265\nval REarth = 6371.0 // kilometers\ndef toRadians(x: Double): Double = x * pi / 180.0\n\ndef haversine(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double = {\n    0.0\n}\n\n\n// Now you can use \"haver\" as a function with Spark SQL \nimport org.apache.spark.sql.functions.udf\nval haver = udf(haversine _)","dateUpdated":"2018-03-21T22:43:31-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pi: Double = 3.14159265\nREarth: Double = 6371.0\ntoRadians: (x: Double)Double\nhaversine: (lat1: Double, lon1: Double, lat2: Double, lon2: Double)Double\nimport org.apache.spark.sql.functions.udf\nhaver: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function4>,DoubleType,Some(List(DoubleType, DoubleType, DoubleType, DoubleType)))\n"}]},"apps":[],"jobName":"paragraph_1521686465026_-1998531478","id":"20180318-195342_1996330025","dateCreated":"2018-03-21T22:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1127","user":"anonymous","dateFinished":"2018-03-21T22:43:31-0400","dateStarted":"2018-03-21T22:43:31-0400"},{"text":"// Find all stations within 100 km using your haversine function\n\nval capeCanaveralLatitude = 28.388382\nval capeCanaveralLongitude = -80.603498\n\n\n\n     \n","dateUpdated":"2018-03-21T22:45:33-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"capeCanaveralLatitude: Double = 28.388382\ncapeCanaveralLongitude: Double = -80.603498\n"}]},"apps":[],"jobName":"paragraph_1521686465027_-1998916227","id":"20180318-191955_1910278437","dateCreated":"2018-03-21T22:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1129","user":"anonymous","dateFinished":"2018-03-21T22:45:34-0400","dateStarted":"2018-03-21T22:45:33-0400"},{"text":"// Use inverse distance weighting to estimate the temperature at Cape Canaveral on that day\n// You might do this in serveral steps.  First compute a weight for each station within 100 km that recorded\n// a temperature.  Then, when you have a column of weights, apply an aggregation function to\n// multiply each station temperature by a weight and to compute the sum of the weights.\n// This link explains more on inverse distance weighting:\n// https://en.wikipedia.org/wiki/Inverse_distance_weighting\n// Use p=2 in the formula\n\n","dateUpdated":"2018-03-21T22:54:48-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1521686465030_-2000070473","id":"20180319-091159_1767904139","dateCreated":"2018-03-21T22:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1132","user":"anonymous","dateFinished":"2018-03-21T22:48:34-0400","dateStarted":"2018-03-21T22:48:34-0400"},{"text":"// Once you have the weighted sum of temperatures (numerator) and the sum of the weights (denominator)\n// you can obtain your final result\n\n","dateUpdated":"2018-03-21T22:50:34-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1521686465031_-2000455222","id":"20180318-194257_301533474","dateCreated":"2018-03-21T22:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1133","user":"anonymous","dateFinished":"2018-03-21T22:50:34-0400","dateStarted":"2018-03-21T22:50:34-0400"},{"dateUpdated":"2018-03-21T22:52:14-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521686465032_-2002378967","id":"20180318-194403_1746372836","dateCreated":"2018-03-21T22:41:05-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1134","text":"// Extra credit - find average temperature for Jan 28 for every year.\n// Generate a line plot.\n// Was the Jan 28, 1986 temperature unusual?"}],"name":"DS4300_The_Challenger_Accident","id":"2D9YZC9F1","angularObjects":{"2DA2FN4TE:shared_process":[],"2DBDHEE85:shared_process":[],"2DAAJ4738:shared_process":[],"2D8XUAGRP:shared_process":[],"2D9WEZ1Q9:shared_process":[],"2D8G1ZRWN:shared_process":[],"2D9UXGRDU:shared_process":[],"2D8SC5HUS:shared_process":[],"2DBSURVCH:shared_process":[],"2DBE24VM8:shared_process":[],"2DA8K51P7:shared_process":[],"2D9ZHDJKP:shared_process":[],"2D874DZF7:shared_process":[],"2D9MK5TKP:shared_process":[],"2D8PPD5BN:shared_process":[],"2DANQB8CA:shared_process":[],"2DBUZEEE9:shared_process":[],"2D8URBRG2:shared_process":[],"2D9CTXBFW:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}